package main

import (
	"log"
	"fmt"
	"net"
	"os"
	"bufio"
	"strconv"
	"strings"
	"math/rand"
	"net/rpc/jsonrpc"
)

func startRPCServer(tcpadr string){
	log.Print("Starting Server...")
	tcpAddr, err := net.ResolveTCPAddr("tcp", tcpadr)
	checkError(err)

	listener, err := net.ListenTCP("tcp", tcpAddr)
	checkError(err)

	log.Print("listening for synchronous connection on: ", listener.Addr())
	
	for {
			//log.Print("waiting for connections ...")
			conn, err := listener.Accept()
			if err != nil {
				log.Printf("accept error: %s", conn)
				continue
			}
			//log.Printf("connection started: %v", conn.RemoteAddr())
			go jsonrpc.ServeConn(conn)
		}
}


func RPC_caller(nodeAddr string, funcName string, args interface{}, reply interface{}) error{

	client, err := jsonrpc.Dial("tcp", nodeAddr)
	if err != nil {
		fmt.Println("dialing:", err)
		return err
	}
	
	err = client.Call("LocalNode."+funcName, args, &reply)

	if err != nil {
			//log.Fatal("communication error:", err)
		fmt.Println("Communication error : ",err)
	}
	/*
	else{
		fmt.Println("\n Communicated successfully wt reply as : ", reply)
		fmt.Println("\n")
	}
	*/
	return err
}

func RPC_caller1(nodeAddr string, funcName string, args []byte, reply *SNode) error{

	client, err := jsonrpc.Dial("tcp", nodeAddr)
	if err != nil {
		fmt.Println("dialing:", err)
		return err
	}
	
	err = client.Call("LocalNode."+funcName, args, &reply)
	
	if err != nil {
			fmt.Println("communication error:", err)
	}
	/*
	else{
		fmt.Println("\n Communicated successfully wt reply as : ", reply)
		fmt.Println("\n")
	}
	*/
	return err
}


// Function to get the local address of my machine
func getLocalAddress() string {
    var localaddress string

    ifaces, err := net.Interfaces()
    if err != nil {
        panic("init: failed to find network interfaces")
    }

    // find the first non-loopback interface with an IP address
    for _, elt := range ifaces {
        if elt.Flags&net.FlagLoopback == 0 && elt.Flags&net.FlagUp != 0 {
            addrs, err := elt.Addrs()
            if err != nil {
                panic("init: failed to get addresses for network interface")
            }

           for _, addr := range addrs {
                if ipnet, ok := addr.(*net.IPNet); ok {
                    if ip4 := ipnet.IP.To4(); len(ip4) == net.IPv4len {
                        localaddress = ip4.String()
                        break
                    }
                }
            }
        }
    }
    if localaddress == "" {
        panic("init: failed to find non-loopback interface with valid address on this node")
    }

    return localaddress
}



//------------------------------------Main_Function_Starts_Here----------------------------------------------

func main() {

	fmt.Println("Launching server...")

	//lnode := new(LocalNode)
	port:=os.Args[1]
	//port:=":8085"
	adr:=getLocalAddress()
	addr:=adr+":"+port
	conf := DefaultConfig(addr)
	
	
	ring,err := Join(conf,"172.17.0.1:8081")
	checkError(err)
	fmt.Println("Ring joined successfully : ", ring)
	
	
	/*
	ring,err := Create(conf)
	fmt.Println("Ring created successfully : ", ring)
	checkError(err)
	*/

	reader := bufio.NewReader(os.Stdin)
	fmt.Println("\n\n")
	fmt.Println("Instructions for execution : \n")
	fmt.Println("Press 'G' for looking up the value for a key and Enter")
	fmt.Println("Press 'P' for putting a key-value pair and Enter")

for{
	
	command, _ := reader.ReadString('\n')
	
	switch command {

		case "G\n":
			fmt.Println("You chose to get the value for a key")
			var key string
			fmt.Printf("Enter Key :  ")
			w, _ := reader.ReadString('\n')
			key = strings.Trim(w,"\n")
			fmt.Println("key Entered : ",key)
			

			///TODO :: First check in your own map if present return the value else find its successor
			
			var ln *LocalNode
			ln = ring.lnodes[0]

			val, ok := map[string]int(ln.Store)[key] 
			if ok{
				fmt.Println("Obtained Result from local Node : ",val)
				fmt.Println("")	
			}else{

				// Hash the key
				h := ring.config.HashFunc()
				h.Write([]byte(key))
				key_hash := h.Sum(nil)
				
				var err error
				
				var succ SNode

				err=RPC_caller1(adr+":8081","FindCoordinator",key_hash,&succ)
				checkError(err)
				fmt.Println("Co-ordinator for the key ",key,)
				fmt.Println(succ.Host)

				var reply []*SNode
				err=RPC_caller(succ.Host,"FindSuccessors","",&(reply))
				checkError(err)
				
				
				possibleNodes:=make([]string,ring.config.NumSuccessors+1)
				possibleNodes[0]=succ.Host
				for i,sc := range reply{
					possibleNodes[i+1]=(*sc).Host
				}

				var value int

				var succ_host string
				i:=rand.Intn(len(possibleNodes))
				succ_host = possibleNodes[i]
				err = RPC_caller(succ_host,"Get",key,&value)
				if(err!=nil){
					err = RPC_caller(possibleNodes[0],"Get",key,&value)
					checkError(err)
				}

				fmt.Println("Obtained Result from host : ",succ_host," and value is ",value)
				fmt.Println("")
			}

		case "P\n":
			fmt.Println("You chose to put a new key-value pair")
			var kv Data
			fmt.Printf("Enter the Key :  ")
			w, _ := reader.ReadString('\n')
			kv.Key = strings.Trim(w,"\n")

			fmt.Printf("Enter the Value :  ")
			t, _ := reader.ReadString('\n')
			v := strings.Trim(t,"\n")
			var err error
			kv.Value, err = strconv.Atoi(v)
			checkError(err)
			/*
			var rep string
			err = RPC_caller(adr+":8081","Ping",nil,&rep)
			fmt.Println(rep)
			*/

			// Hash the key
			h := ring.config.HashFunc()
			h.Write([]byte(kv.Key))
			key_hash := h.Sum(nil)

			//fmt.Println("Before FindCoordinator call")

			var succ SNode
			err=RPC_caller1(adr+":"+port,"FindCoordinator",key_hash,&succ)
			checkError(err)

			err = RPC_caller(succ.Host,"Put",kv,nil)
			if(err!=nil){
				fmt.Println("Put Unsuccessful!")
				fmt.Println("")
			}else{
				fmt.Print("Key value pair successfully Entered : ",kv.Key )
				fmt.Println(" - ",kv.Value)
				fmt.Println("")
			}

			fmt.Println("Now entering this key-value pair into this co-ordinator's successors ")

			var reply []*SNode
			err=RPC_caller(succ.Host,"FindSuccessors","",&(reply))
			checkError(err)
			
			for i,sc := range reply{
				if sc!=nil{
					fmt.Println("succ_list [",i,"] : ",(*sc).Host)
					go asyncPut(*sc,kv)
				}else{
					break
				}
			}


		case "L\n":

				var err error
				/*
				var reply string
				err=RPC_caller(ring.lnodes[0].Successors[0].Host,"PutAll",&(ring.lnodes[0].Store), &reply)
				checkError(err)
				*/
				err=ring.lnodes[0].leave()
				checkError(err)
				fmt.Println("Node successfully left the ring")
				

		case "D\n":
			fmt.Println("You chose to delete an existing key-value pair")
			
			var kv string
			fmt.Printf("Enter the Key :  ")
			w, _ := reader.ReadString('\n')
			kv = strings.Trim(w,"\n")

			// Hash the key
			h := ring.config.HashFunc()
			h.Write([]byte(kv))
			key_hash := h.Sum(nil)

			var succ SNode
			err:=RPC_caller1(adr+":"+port,"FindCoordinator",key_hash,&succ)
			checkError(err)
			

			err=RPC_caller(succ.Host,"Delete",kv, "")
			checkError(err)
			if err==nil{
				fmt.Println("Key value pair Deleted Successfully")
			}
			
			
		case "F\n":
			
			var key string
			fmt.Printf("Enter Key :  ")
			w, _ := reader.ReadString('\n')
			key = strings.Trim(w,"\n")
			fmt.Println("key Entered : ",key)


			// Hash the key
			h := ring.config.HashFunc()
			h.Write([]byte(key))
			key_hash := h.Sum(nil)


			var reply []*SNode
			err:=RPC_caller(adr+port,"FindCoordinatorWithFinger",key_hash,&(reply))
			checkError(err)
			for i, value := range reply {
				//fmt.Println("value here : ",value)
				if value!=nil{
					fmt.Println("Succceesssor ",i,"th : ",*(reply[i]))
				}

			}
		}
	}
}

func checkError(err error) {
	if err != nil {
		fmt.Println("Fatal error ", err.Error())
		//os.Exit(1)
	}
}

func asyncPut(sc SNode,kv Data){
	err:=RPC_caller(sc.Host,"Put",kv,nil)
	if(err!=nil){
		fmt.Println("Put Unsuccessful!")
		fmt.Println("")
	}else{
		fmt.Print("Key value pair successfully Entered : ",kv.Key )
		fmt.Println(" - ",kv.Value)
		fmt.Println("")
	}
}
